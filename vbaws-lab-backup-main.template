{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Veeam Backup for AWS Lab Setup - Backup Account - Main",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Username"
          },
          "Parameters": [
            "UserName"
          ]
        },
        {
          "Label": {
            "default": "Production Account"
          },
          "Parameters": [
            "ProductionAccountId"
          ]
        },
        {
          "Label": {
            "default": "Region"
          },
          "Parameters": [
            "RegionId"
          ]
        },
        {
          "Label": {
            "default": "VPC CIDR"
          },
          "Parameters": [
            "VpcCidr"
          ]
        },
        {
          "Label": {
            "default": "Core Network Stack"
          },
          "Parameters": [
            "NetworkStackName"
          ]
        },
        {
          "Label": {
            "default": "CMK Policy Role"
          },
          "Parameters": [
            "CmkPolicyRole"
          ]
        },
        {
          "Label": {
            "default": "Windows AMI"
          },
          "Parameters": [
            "LatestWindowsServer2022Ami"
          ]
        }
      ],
      "ParameterLabels": {
        "UserName": {
          "default": "Username for this lab"
        },
        "ProductionAccountId": {
          "default": "AWS account where instances will be deployed to test cross-account operations"
        },
        "RegionId": {
          "default": "AWS Region where lab resources will be deployed"
        },
        "VpcCidr": {
          "default": "CIDR block for the lab VPC"
        },
        "NetworkStackName": {
          "default": "Name of the core network stack for the lab"
        },
        "CmkPolicyRole": {
          "default": "IAM role that will be given access to the KMS key created for the lab"
        },
        "LatestWindowsServer2022Ami": {
          "default": "Do not change this value. This is the AMI that will be used to launch the jumpbox"
        }
      }
    }
  },
  "Parameters": {
    "UserName": {
      "Description": "First letter of first name, first four letters of last name, all lowercase, 5 characters total. Example: Victor Flex -> vflex, or Woo Hoo -> wohoo",
      "Type": "String",
      "AllowedPattern": "^[a-z0-9]*$",
      "MaxLength": 5,
      "ConstraintDescription": "Username must be lowercase and cannot contain more than 5 characters."
    },
    "ProductionAccountId": {
      "Description": "The 12-digit AWS account ID number of the production account. Example: 123456789012",
      "Type": "String",
      "MinLength": 12,
      "MaxLength": 12,
      "ConstraintDescription": "AWS account IDs have 12 digits. Check the account ID number."
    },
    "RegionId": {
      "Description": "Example: us-east-1",
      "Type": "String",
      "AllowedValues": [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "ap-east-1",
        "ap-south-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "eu-north-1",
        "sa-east-1",
        "me-south-1"
      ],
      "ConstraintDescription": "The region specified is not supported or is invalid."
    },
    "VpcCidr": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Description": "Specify an IPv4 CIDR. This CIDR must not overlap with the core network stack's CIDR. Example: 10.1.0.0/16.",
      "Type": "String"
    },
    "NetworkStackName": {
      "Description": "Specify the name of the core network stack that was deployed for this lab. This is a prerequisite. If you have not deployed the core network stack, refer to the lab instructions to deploy it first.",
      "Type": "String"
    },
    "CmkPolicyRole": {
      "Description": "Specify the name of the IAM role that will be given access to the KMS key created for the lab.",
      "Type": "String"
    },
    "LatestWindowsServer2022Ami": {
      "Description": "Do not change this value. This specifies the latest available AMI for Windows Server 2022 Base.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "HVM64": "ami-01d64d03fd3da4685"
      },
      "us-east-2": {
        "HVM64": "ami-032d2c2a2eb72d4cc"
      },
      "us-west-1": {
        "HVM64": "ami-0e6180c67ec8d75f0"
      },
      "us-west-2": {
        "HVM64": "ami-0a187023c1796a331"
      },
      "af-south-1": {
        "HVM64": "ami-0738271cdb44fb1da"
      },
      "ap-south-1": {
        "HVM64": "ami-0b876110746918e21"
      },
      "ap-northeast-2": {
        "HVM64": "ami-0f7954f2ef19ae374"
      },
      "ap-southeast-1": {
        "HVM64": "ami-052dab2454033a9e1"
      },
      "ap-southeast-2": {
        "HVM64": "ami-0c0ca80e7520ea883"
      },
      "ap-southeast-3": {
        "HVM64": "ami-0097c45e03987b8c1"
      },
      "ap-northeast-1": {
        "HVM64": "ami-0fd88cdef00a44a3c"
      },
      "ca-central-1": {
        "HVM64": "ami-0566013be96032266"
      },
      "eu-central-1": {
        "HVM64": "ami-0220b641d11c2651c"
      },
      "eu-west-1": {
        "HVM64": "ami-06ce4922128fcadfc"
      },
      "eu-west-2": {
        "HVM64": "ami-098e708cf737bbe6d"
      },
      "eu-south-1": {
        "HVM64": "ami-0a6e6011f4e943998"
      },
      "eu-west-3": {
        "HVM64": "ami-0d3ac2d99abcef31a"
      },
      "eu-north-1": {
        "HVM64": "ami-0c46900d53c8147e7"
      },
      "sa-east-1": {
        "HVM64": "ami-0f18a59a2880cb58b"
      },
      "me-south-1": {
        "HVM64": "ami-0cdfa3c4c8ec11a94"
      },
      "ap-east-1": {
        "HVM64": "ami-0dd789af5119c10a8"
      },
      "ap-northeast-3": {
        "HVM64": "ami-0d6493ebee363f105"
      },
      "us-gov-east-1": {
        "HVM64": "ami-06a9b6586f361570c"
      },
      "us-gov-west-1": {
        "HVM64": "ami-0e79e30c590cb549b"
      }
    }
  },
  "Resources": {
    "BackupVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-vpc"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-igw"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupAttachIGW": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "InternetGatewayId": {
          "Ref": "BackupIGW"
        }
      }
    },
    "BackupPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "CidrBlock": {
          "Fn::Select": [
            0,
            {
              "Fn::Cidr": [
                {
                  "Fn::GetAtt": [
                    "BackupVPC",
                    "CidrBlock"
                  ]
                },
                2,
                8
              ]
            }
          ]
        },
        "AvailabilityZone": "us-east-1a",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-public-subnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupPublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-public-rt"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "BackupAttachIGW",
      "Properties": {
        "RouteTableId": {
          "Ref": "BackupPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "BackupIGW"
        }
      }
    },
    "BackupCorePublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackName}-CorePublicSubnetRouteTableId"
          }
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt":[
            "BackupVPC",
            "CidrBlock"
          ]
        },
        "TransitGatewayId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackName}-TransitGatewayId"
          }
        }
      }
    },
    "BackupPublicRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "BackupPublicSubnet"
        },
        "RouteTableId": {
          "Ref": "BackupPublicRouteTable"
        }
      }
    },
    "BackupPrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "CidrBlock": {
          "Fn::Select": [
            1,
            {
              "Fn::Cidr": [
                {
                  "Fn::GetAtt": [
                    "BackupVPC",
                    "CidrBlock"
                  ]
                },
                2,
                8
              ]
            }
          ]
        },
        "AvailabilityZone": "us-east-1a",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-private-subnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupPrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-private-rt"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupPrivateSubnetTransitGatewayAttachment": {
      "Type": "AWS::EC2::TransitGatewayAttachment",
      "Properties": {
        "SubnetIds": [
          {
            "Ref": "BackupPrivateSubnet"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-tgw-attachment"
                ]
              ]
            }
          }
        ],
        "TransitGatewayId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackName}-TransitGatewayId"
          }
        },
        "VpcId": {
          "Ref": "BackupVPC"
        }
      }
    },
    "BackupPrivateSubnetTransitGatewayRouteTableAssociation": {
      "Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
      "Properties": {
        "TransitGatewayAttachmentId": {
          "Ref": "BackupPrivateSubnetTransitGatewayAttachment"
        },
        "TransitGatewayRouteTableId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackName}-TransitGatewayRouteTableId"
          }
        }
      }
    },
    "BackupPrivateSubnetTransitGatewayRouteTablePropagation": {
      "Type": "AWS::EC2::TransitGatewayRouteTablePropagation",
      "Properties": {
        "TransitGatewayAttachmentId": {
          "Ref": "BackupPrivateSubnetTransitGatewayAttachment"
        },
        "TransitGatewayRouteTableId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackName}-TransitGatewayRouteTableId"
          }
        }
      }
    },
    "BackupPrivateRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "BackupPrivateSubnetTransitGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "BackupPrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "TransitGatewayId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackName}-TransitGatewayId"
          }
        }
      }
    },
    "BackupPrivateRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "BackupPrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "BackupPrivateRouteTable"
        }
      }
    },
    "BackupVpcEndpointS3": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "RouteTableIds": [
          {
            "Ref": "BackupPrivateRouteTable"
          }
        ],
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
        },
        "VpcId": {
          "Ref": "BackupVPC"
        }
      }
    },
    "BackupVpcEndpointEbs": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "VpcEndpointType": "Interface",
        "SubnetIds": [
          {
            "Ref": "BackupPrivateSubnet"
          }
        ],
        "PrivateDnsEnabled": true,
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.ebs"
        }
      }
    },
    "BackupPublicSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "GroupDescription": "Allow RDP access on TCP 3389",
        "GroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserName"
              },
              "backup-public-sg"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3389,
            "ToPort": 3389,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-public-sgrule"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupPrivateSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "BackupVPC"
        },
        "GroupDescription": "Allow HTTPS access on TCP 443",
        "GroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserName"
              },
              "backup-private-sg"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": {
              "Ref": "VpcCidr"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "backup-private-sgrule"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserName"
              },
              "bucket-veeam-aws-lab"
            ]
          ]
        },
        "AccessControl": "Private",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "BackupBucketEmptyOnDelete": {
      "Type": "Custom::EmptyOnDelete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BackupBucketEmptyOnDeleteLambda",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BackupBucket"
        }
      }
    },
    "BackupBucketEmptyOnDeleteLambda": {
      "DependsOn": "BackupBucket",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3\nimport json\nimport logging\nimport cfnresponse\n\ndef lambda_handler(event, context):\n  print('Received event: %s' % json.dumps(event))\n  status = cfnresponse.SUCCESS\n  try:\n      eventbucket = event['ResourceProperties']['BucketName']\n      if event['RequestType'] == 'Delete':\n          s3 = boto3.resource('s3')\n          bucket = s3.Bucket(eventbucket)\n          bucket.objects.all().delete()\n  except Exception as e:\n      logging.error('Exception: %s' % e, exc_info=True)\n      status = cfnresponse.FAILED\n  finally:\n      cfnresponse.send(event, context, status, {}, context.log_stream_name)\n"
        },
        "Description": "Lambda function which empties the bucket prior to deletion when the stack is deleted.",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "BackupBucketEmptyOnDeleteLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      }
    },
    "BackupBucketEmptyOnDeleteLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "BackupBucketEmptyOnDeleteLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "s3:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Deny",
                  "Action": [
                    "s3:DeleteBucket"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "VeeamInstanceBackupRestoreAccessRoleV1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:sts::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/",
                      {
                        "Fn::Join": [
                          "/",
                          [
                            {
                              "Ref": "VeeamImpersonationRoleV1"
                            }
                          ]
                        ]
                      }
                    ]
                  ]
                }
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vcb-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "backup-storage:MountCapsule",
                    "backup:CopyFromBackupVault",
                    "backup:CopyIntoBackupVault",
                    "backup:CreateBackupVault",
                    "backup:DeleteBackupVault",
                    "backup:DeleteRecoveryPoint",
                    "backup:DescribeBackupJob",
                    "backup:DescribeCopyJob",
                    "backup:DescribeRecoveryPoint",
                    "backup:DescribeRestoreJob",
                    "backup:ListBackupVaults",
                    "backup:ListRecoveryPointsByBackupVault",
                    "backup:ListTags",
                    "backup:StartBackupJob",
                    "backup:StartCopyJob",
                    "backup:StartRestoreJob",
                    "backup:StopBackupJob",
                    "backup:TagResource",
                    "backup:UntagResource",
                    "ebs:ListChangedBlocks",
                    "ebs:ListSnapshotBlocks",
                    "ec2:AcceptVpcEndpointConnections",
                    "ec2:AllocateAddress",
                    "ec2:AssociateAddress",
                    "ec2:AssociateClientVpnTargetNetwork",
                    "ec2:AssociateDhcpOptions",
                    "ec2:AssociateRouteTable",
                    "ec2:AssociateSubnetCidrBlock",
                    "ec2:AssociateTransitGatewayMulticastDomain",
                    "ec2:AssociateTransitGatewayRouteTable",
                    "ec2:AssociateVpcCidrBlock",
                    "ec2:AttachInternetGateway",
                    "ec2:AttachVolume",
                    "ec2:AttachVpnGateway",
                    "ec2:AuthorizeClientVpnIngress",
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:CopySnapshot",
                    "ec2:CreateClientVpnEndpoint",
                    "ec2:CreateClientVpnRoute",
                    "ec2:CreateCustomerGateway",
                    "ec2:CreateDefaultSubnet",
                    "ec2:CreateDefaultVpc",
                    "ec2:CreateDhcpOptions",
                    "ec2:CreateEgressOnlyInternetGateway",
                    "ec2:CreateInternetGateway",
                    "ec2:CreateKeyPair",
                    "ec2:CreateManagedPrefixList",
                    "ec2:CreateNatGateway",
                    "ec2:CreateNetworkAcl",
                    "ec2:CreateNetworkAclEntry",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateRoute",
                    "ec2:CreateRouteTable",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateSnapshot",
                    "ec2:CreateSnapshots",
                    "ec2:CreateSubnet",
                    "ec2:CreateTags",
                    "ec2:CreateTransitGateway",
                    "ec2:CreateTransitGatewayMulticastDomain",
                    "ec2:CreateTransitGatewayPeeringAttachment",
                    "ec2:CreateTransitGatewayPrefixListReference",
                    "ec2:CreateTransitGatewayRoute",
                    "ec2:CreateTransitGatewayRouteTable",
                    "ec2:CreateTransitGatewayVpcAttachment",
                    "ec2:CreateVolume",
                    "ec2:CreateVpc",
                    "ec2:CreateVpcEndpoint",
                    "ec2:CreateVpcEndpointServiceConfiguration",
                    "ec2:CreateVpcPeeringConnection",
                    "ec2:CreateVpnConnection",
                    "ec2:CreateVpnGateway",
                    "ec2:DeleteClientVpnEndpoint",
                    "ec2:DeleteClientVpnRoute",
                    "ec2:DeleteCustomerGateway",
                    "ec2:DeleteDhcpOptions",
                    "ec2:DeleteEgressOnlyInternetGateway",
                    "ec2:DeleteInternetGateway",
                    "ec2:DeleteKeyPair",
                    "ec2:DeleteManagedPrefixList",
                    "ec2:DeleteNatGateway",
                    "ec2:DeleteNetworkAcl",
                    "ec2:DeleteNetworkAclEntry",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DeleteRoute",
                    "ec2:DeleteRouteTable",
                    "ec2:DeleteSecurityGroup",
                    "ec2:DeleteSnapshot",
                    "ec2:DeleteSubnet",
                    "ec2:DeleteTags",
                    "ec2:DeleteTransitGateway",
                    "ec2:DeleteTransitGatewayMulticastDomain",
                    "ec2:DeleteTransitGatewayPeeringAttachment",
                    "ec2:DeleteTransitGatewayPrefixListReference",
                    "ec2:DeleteTransitGatewayRoute",
                    "ec2:DeleteTransitGatewayRouteTable",
                    "ec2:DeleteTransitGatewayVpcAttachment",
                    "ec2:DeleteVolume",
                    "ec2:DeleteVpc",
                    "ec2:DeleteVpcEndpointServiceConfigurations",
                    "ec2:DeleteVpcEndpoints",
                    "ec2:DeleteVpcPeeringConnection",
                    "ec2:DeleteVpnConnection",
                    "ec2:DeleteVpnGateway",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeClientVpnAuthorizationRules",
                    "ec2:DescribeClientVpnEndpoints",
                    "ec2:DescribeClientVpnRoutes",
                    "ec2:DescribeClientVpnTargetNetworks",
                    "ec2:DescribeConversionTasks",
                    "ec2:DescribeCustomerGateways",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeEgressOnlyInternetGateways",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstanceAttribute",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeInstanceTypes",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInternetGateways",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeManagedPrefixLists",
                    "ec2:DescribeNatGateways",
                    "ec2:DescribeNetworkAcls",
                    "ec2:DescribeNetworkInterfaceAttribute",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeRegions",
                    "ec2:DescribeRouteTables",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSnapshotAttribute",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeTags",
                    "ec2:DescribeTransitGatewayAttachments",
                    "ec2:DescribeTransitGatewayMulticastDomains",
                    "ec2:DescribeTransitGatewayPeeringAttachments",
                    "ec2:DescribeTransitGatewayRouteTables",
                    "ec2:DescribeTransitGatewayVpcAttachments",
                    "ec2:DescribeTransitGateways",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVpcAttribute",
                    "ec2:DescribeVpcEndpointServiceConfigurations",
                    "ec2:DescribeVpcEndpoints",
                    "ec2:DescribeVpcPeeringConnections",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeVpnConnections",
                    "ec2:DescribeVpnGateways",
                    "ec2:DetachInternetGateway",
                    "ec2:DetachVolume",
                    "ec2:DetachVpnGateway",
                    "ec2:DisableTransitGatewayRouteTablePropagation",
                    "ec2:DisableVgwRoutePropagation",
                    "ec2:DisassociateAddress",
                    "ec2:DisassociateClientVpnTargetNetwork",
                    "ec2:DisassociateRouteTable",
                    "ec2:DisassociateTransitGatewayMulticastDomain",
                    "ec2:DisassociateTransitGatewayRouteTable",
                    "ec2:EnableTransitGatewayRouteTablePropagation",
                    "ec2:EnableVgwRoutePropagation",
                    "ec2:GetEbsDefaultKmsKeyId",
                    "ec2:GetManagedPrefixListEntries",
                    "ec2:GetTransitGatewayMulticastDomainAssociations",
                    "ec2:GetTransitGatewayPrefixListReferences",
                    "ec2:GetTransitGatewayRouteTableAssociations",
                    "ec2:GetTransitGatewayRouteTablePropagations",
                    "ec2:ModifyClientVpnEndpoint",
                    "ec2:ModifyInstanceAttribute",
                    "ec2:ModifyManagedPrefixList",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:ModifySnapshotAttribute",
                    "ec2:ModifySubnetAttribute",
                    "ec2:ModifyTransitGateway",
                    "ec2:ModifyTransitGatewayVpcAttachment",
                    "ec2:ModifyVolume",
                    "ec2:ModifyVpcAttribute",
                    "ec2:ModifyVpcEndpoint",
                    "ec2:ModifyVpcEndpointServiceConfiguration",
                    "ec2:ModifyVpcPeeringConnectionOptions",
                    "ec2:ModifyVpnConnection",
                    "ec2:RejectVpcEndpointConnections",
                    "ec2:ReleaseAddress",
                    "ec2:ReplaceNetworkAclAssociation",
                    "ec2:ReplaceRouteTableAssociation",
                    "ec2:RevokeClientVpnIngress",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RevokeSecurityGroupIngress",
                    "ec2:RunInstances",
                    "ec2:SearchTransitGatewayRoutes",
                    "ec2:StartInstances",
                    "ec2:StopInstances",
                    "ec2:TerminateInstances",
                    "elasticfilesystem:Backup",
                    "elasticfilesystem:CreateAccessPoint",
                    "elasticfilesystem:CreateFileSystem",
                    "elasticfilesystem:CreateMountTarget",
                    "elasticfilesystem:DeleteAccessPoint",
                    "elasticfilesystem:DeleteFileSystem",
                    "elasticfilesystem:DeleteMountTarget",
                    "elasticfilesystem:DescribeAccessPoints",
                    "elasticfilesystem:DescribeBackupPolicy",
                    "elasticfilesystem:DescribeFileSystemPolicy",
                    "elasticfilesystem:DescribeFileSystems",
                    "elasticfilesystem:DescribeLifecycleConfiguration",
                    "elasticfilesystem:DescribeMountTargetSecurityGroups",
                    "elasticfilesystem:DescribeMountTargets",
                    "elasticfilesystem:DescribeTags",
                    "elasticfilesystem:ListTagsForResource",
                    "elasticfilesystem:PutBackupPolicy",
                    "elasticfilesystem:PutFileSystemPolicy",
                    "elasticfilesystem:PutLifecycleConfiguration",
                    "elasticfilesystem:Restore",
                    "elasticfilesystem:TagResource",
                    "elasticfilesystem:UntagResource",
                    "elasticfilesystem:UpdateFileSystem",
                    "elasticloadbalancing:AddTags",
                    "elasticloadbalancing:CreateListener",
                    "elasticloadbalancing:CreateLoadBalancer",
                    "elasticloadbalancing:CreateTargetGroup",
                    "elasticloadbalancing:DeleteListener",
                    "elasticloadbalancing:DeleteLoadBalancer",
                    "elasticloadbalancing:DeleteTargetGroup",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:DescribeListeners",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "elasticloadbalancing:DescribeTags",
                    "elasticloadbalancing:DescribeTargetGroups",
                    "elasticloadbalancing:DescribeTargetHealth",
                    "elasticloadbalancing:ModifyTargetGroup",
                    "elasticloadbalancing:RegisterTargets",
                    "elasticloadbalancing:RemoveTags",
                    "elasticloadbalancing:SetSecurityGroups",
                    "elasticloadbalancing:SetSubnets",
                    "events:DeleteRule",
                    "events:DescribeRule",
                    "events:ListTargetsByRule",
                    "events:PutRule",
                    "events:PutTargets",
                    "events:RemoveTargets",
                    "iam:AddRoleToInstanceProfile",
                    "iam:AttachRolePolicy",
                    "iam:CreateInstanceProfile",
                    "iam:CreateRole",
                    "iam:CreateServiceLinkedRole",
                    "iam:DeleteInstanceProfile",
                    "iam:DeleteRole",
                    "iam:DeleteRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:GetContextKeysForPrincipalPolicy",
                    "iam:GetInstanceProfile",
                    "iam:GetRole",
                    "iam:ListAccountAliases",
                    "iam:ListAttachedRolePolicies",
                    "iam:ListInstanceProfiles",
                    "iam:ListInstanceProfilesForRole",
                    "iam:ListRolePolicies",
                    "iam:PassRole",
                    "iam:PutRolePolicy",
                    "iam:RemoveRoleFromInstanceProfile",
                    "iam:SimulatePrincipalPolicy",
                    "kinesis:CreateStream",
                    "kinesis:DeleteStream",
                    "kinesis:DescribeStream",
                    "kinesis:PutRecord",
                    "kms:CreateGrant",
                    "kms:Decrypt",
                    "kms:DescribeKey",
                    "kms:Encrypt",
                    "kms:GenerateDataKeyWithoutPlaintext",
                    "kms:GetKeyPolicy",
                    "kms:ListAliases",
                    "kms:ListKeys",
                    "kms:ReEncryptFrom",
                    "kms:ReEncryptTo",
                    "lambda:ListFunctions",
                    "ram:AssociateResourceShare",
                    "ram:CreateResourceShare",
                    "ram:DeleteResourceShare",
                    "ram:DisassociateResourceShare",
                    "ram:GetResourceShareAssociations",
                    "ram:GetResourceShares",
                    "ram:ListPrincipals",
                    "ram:ListResourceSharePermissions",
                    "ram:ListResources",
                    "ram:TagResource",
                    "ram:UntagResource",
                    "rds:AddTagsToResource",
                    "rds:CopyDbClusterSnapshot",
                    "rds:CopyDBSnapshot",
                    "rds:CreateDBClusterSnapshot",
                    "rds:CreateDBInstance",
                    "rds:CreateDBSnapshot",
                    "rds:DeleteDBCluster",
                    "rds:DeleteDbclusterSnapshot",
                    "rds:DeleteDBInstance",
                    "rds:DeleteDBSnapshot",
                    "rds:DescribeAccountAttributes",
                    "rds:DescribeDBClusterParameterGroups",
                    "rds:DescribeDBClusterParameters",
                    "rds:DescribeDBClusters",
                    "rds:DescribeDBClusterSnapshots",
                    "rds:DescribeDBEngineVersions",
                    "rds:DescribeDBInstances",
                    "rds:DescribeDBParameterGroups",
                    "rds:DescribeDBSnapshots",
                    "rds:DescribeDBSubnetGroups",
                    "rds:DescribeOptionGroups",
                    "rds:DescribeOrderableDBInstanceOptions",
                    "rds:ListTagsForResource",
                    "rds:ModifyDBCluster",
                    "rds:ModifyDBClusterSnapshotAttribute",
                    "rds:ModifyDBInstance",
                    "rds:ModifyDBSnapshotAttribute",
                    "rds:RemoveTagsFromResource",
                    "rds:RestoreDBClusterFromSnapshot",
                    "rds:RestoreDBInstanceFromDBSnapshot",
                    "s3:DeleteObject",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListAllMyBuckets",
                    "s3:ListBucket",
                    "s3:PutObject",
                    "s3:RestoreObject",
                    "servicequotas:ListServiceQuotas",
                    "sns:CreateTopic",
                    "sns:DeleteTopic",
                    "sns:ListSubscriptionsByTopic",
                    "sns:ListTopics",
                    "sns:SetTopicAttributes",
                    "sns:Subscribe",
                    "sns:Unsubscribe",
                    "sqs:CreateQueue",
                    "sqs:DeleteMessage",
                    "sqs:DeleteQueue",
                    "sqs:ListQueues",
                    "sqs:ReceiveMessage",
                    "sqs:SendMessage",
                    "sqs:SetQueueAttributes",
                    "ssm:DescribeInstanceInformation",
                    "ssm:GetCommandInvocation",
                    "ssm:GetParameter",
                    "ssm:SendCommand"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "VeeamImpersonationRoleV1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vcb-assume",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "VcbInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "VeeamImpersonationRoleV1"
          }
        ]
      }
    },
    "VcbRebootAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a reboot when instance status check fails for 3 consecutive minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_Instance",
        "Statistic": "Minimum",
        "Period": 60,
        "EvaluationPeriods": 3,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:reboot"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "VbawsInstance"
            }
          }
        ]
      }
    },
    "VcbRecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when system status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": 60,
        "EvaluationPeriods": 2,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "VbawsInstance"
            }
          }
        ]
      }
    },
    "VbawsInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "BackupPrivateSubnetTransitGatewayAttachment",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "InstanceType": "t3.medium",
        "IamInstanceProfile": {
          "Ref": "VcbInstanceProfile"
        },
        "KeyName": "vbaws-lab-backup",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 16,
              "DeleteOnTermination": true
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeSize": 20,
              "DeleteOnTermination": true
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "vbaws"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "BackupPrivateSG"
          }
        ],
        "SubnetId": {
          "Ref": "BackupPrivateSubnet"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                {
                  "Fn::GetAtt": [
                    "VeeamImpersonationRoleV1",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "VeeamInstanceBackupRestoreAccessRoleV1",
                    "Arn"
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "JumpBoxInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "BackupAttachIGW",
      "Properties": {
        "ImageId": {
          "Ref": "LatestWindowsServer2022Ami"
        },
        "InstanceType": "t3.large",
        "KeyName": "vbaws-lab-backup",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "jumpbox"
                ]
              ]
            }
          },
          {
            "Key": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "UserName"
                  },
                  "tag"
                ]
              ]
            },
            "Value": {
              "Ref": "UserName"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "BackupPublicSG"
              }
            ],
            "AssociatePublicIpAddress": true,
            "DeviceIndex": "0",
            "DeleteOnTermination": true,
            "SubnetId": {
              "Ref": "BackupPublicSubnet"
            }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "gp3",
              "VolumeSize": 30,
              "DeleteOnTermination": true
            }
          }
        ]
      }
    },
    "ProdRegion": {
      "Type": "AWS::CloudFormation::StackSet",
      "Properties": {
        "StackSetName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserName"
              },
              "prod-stack"
            ]
          ]
        },
        "Parameters": [
          {
            "ParameterKey": "UserName",
            "ParameterValue": {
              "Ref": "UserName"
            }
          },
          {
            "ParameterKey": "CmkPolicyRole",
            "ParameterValue": {
              "Ref": "CmkPolicyRole"
            }
          }
        ],
        "PermissionModel": "SELF_MANAGED",
        "StackInstancesGroup": [
          {
            "DeploymentTargets": {
              "Accounts": [
                {
                  "Ref": "ProductionAccountId"
                }
              ]
            },
            "Regions": [
              {
                "Ref": "RegionId"
              }
            ]
          }
        ],
        "TemplateURL": "https://veeam-aws-cloudformation.s3.amazonaws.com/veeam-aws-lab/v3/vbaws-lab-prod.template"
      }
    }
  },
  "Outputs": {
    "VbawsInstanceId": {
      "Description": "InstanceId of the newly created Veeam Backup for AWS instance.",
      "Value": {
        "Ref": "VbawsInstance"
      }
    }
  }
}